name: AI Games Slack App CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ai-games-slack-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript build
      run: npm run build
      
    - name: Run health check script
      run: npm run health-check || true
      
    # TODO: Add actual tests when implemented
    # - name: Run tests
    #   run: npm test

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Setup Node.js for security scan
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies for scan
      run: npm ci

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üöÄ Deployment would happen here"
        echo "This step would typically:"
        echo "1. Connect to production server via SSH"
        echo "2. Pull the new Docker image"
        echo "3. Update the running container"
        echo "4. Run health checks"
        echo "5. Notify team of deployment status"
        
        # Example deployment commands (uncomment and customize for your infrastructure):
        # docker pull ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
        # docker stop ai-games-slack-app || true
        # docker rm ai-games-slack-app || true
        # docker run -d --name ai-games-slack-app \
        #   --restart unless-stopped \
        #   -p 3000:3000 \
        #   --env-file .env.production \
        #   ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
        
    - name: Health check after deployment
      run: |
        echo "üè• Running post-deployment health checks..."
        # sleep 30
        # curl -f http://your-production-domain.com/health || exit 1
        echo "‚úÖ Health check would be performed here"
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "üì¢ Deployment notification would be sent here"
        echo "Status: ${{ job.status }}"
        # This could send a Slack notification, Discord message, etc.